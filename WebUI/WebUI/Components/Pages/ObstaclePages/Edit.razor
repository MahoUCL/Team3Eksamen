@page "/Obstacles/edit"
@inject WebUI.Data.DataContext DB
@    using WebUI.Entity
@inject NavigationManager NavigationManager
@    using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Obstacle</h4>
<hr />
@if (Obstacle is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Obstacle" OnValidSubmit="UpdateObstacle" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Obstacle.ObstacleId" value="@Obstacle.ObstacleId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Obstacle.Name" class="form-control" />
                    <ValidationMessage For="() => Obstacle.Name" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/obstacles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ObstacleId { get; set; }

    [SupplyParameterFromForm]
    public Obstacle? Obstacle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Obstacle ??= await DB.Obstacles.FirstOrDefaultAsync(m => m.ObstacleId == ObstacleId);

        if (Obstacle is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateObstacle()
    {
        DB.Attach(Obstacle!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ObstacleExists(Obstacle!.ObstacleId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/obstacles");
    }

    bool ObstacleExists(int obstacleid)
    {
        return DB.Obstacles.Any(e => e.ObstacleId == obstacleid);
    }
}
